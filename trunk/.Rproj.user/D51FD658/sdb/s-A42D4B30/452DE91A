{
    "collab_server" : "",
    "contents" : "# 27/07/2016 script to open and explore the abundance data from Buoy3\n# Alberto.Rovellini@vuw.ac.nz\n\n# 02.08.2016 script reads from .csv because .xlsx is very messy. Goal now is to analyse a bit better the available\n# data, such as the most abundant species and so on, limit the analysis to those species.\n\nrequire(abind)\nrequire(plyr)\nrequire(ggplot2)\nrequire(reshape2)\n\ndataAllYears <- read.csv(\"/home/somros/Documents/R/exploratoryHoga/input/spongeAbundanceQuadrats.csv\")\n\n# initiate information about the dataset\n\nspecies <- read.csv(\"/home/somros/Documents/R/exploratoryHoga/input/speciesKey.csv\")\nspecies[species==\"\" | species==0] <- NA # drop all that is not a name, to be refined though\n\n# option 1: keep only the species (or at least what is close)\n\nidentified <- species[,-ncol(species)]\nidentified <- identified[complete.cases(identified),]\n\n# option 2: use species when available and description otherwise\n\nspeciesOrDescription <- list()\n\nfor (i in 1:nrow(species)) {\n  if (is.na(species[,2][i])==T) {\n    speciesOrDescription[[i]] <- species[,3][i]\n  } else {\n    speciesOrDescription[[i]] <- species[,2][i]\n  }\n}\nspeciesOrDescription <- unlist(speciesOrDescription) #\n\n# follows general information about the dataset, such as number of years, quadrats, sites and so on\n\nyears <- as.numeric(levels(factor(substr(names(dataAllYears),2,3))))\nyears <- years[is.na(years)==F] # getting rid of the NA and being left with only the years\nquadrats <- as.numeric(levels(factor(substr(names(dataAllYears), nchar(names(dataAllYears)), nchar(names(dataAllYears))))))\nquadrats <- quadrats[is.na(quadrats)==F]# number of quadrats per site\ndataColumns <- ncol(dataAllYears)-1 # number of quadrats in all sites in all years, effectivelty number of columns in the frame\nsites <- c(\"A\", \"B\", \"C\")\n\n# each data column is a quadrat. There are five quadrats per site. first letter of the header is X because \n# read.csv() (and read.table() for that matter) do not allow a column name to start wit a number. \n# first 2 digits after X are the year (05 to 16). S is site, and second to last letter (A, B or C) is the site code.\n# final digit is the quadrat within the site.\n\n# a way to go is to add the quadrats and average between sites. how big are even the quadrats??\n\n\n# all the columns need to be turned to numeric. some typos in the excel spreadsheet might cause the columns to be\n# factors or characters. as the method removes everything that cannot be coerced to numeric, typos such as \"19'\"\n# will also be dropped, hence it's recommended to take a look at the data first.\n# in an ideal world I will adapt the script to skim through typos the right way\n\n# cut the whole thing to the first 125 rows, as below that it gets confused\n\ndataAllYears <- dataAllYears[1:124,]\n\nfor (i in 1:ncol(dataAllYears)) {\n  if (is.numeric(dataAllYears[,i])==T) {\n    dataAllYears[,i] <- dataAllYears[,i]\n  } else {\n    dataAllYears[,i] <- as.numeric(levels(dataAllYears[,i])[dataAllYears[,i]]) # this removes everything that won't fit as numeric\n  }\n}\n\ndataAllYears[is.na(dataAllYears)] <- 0 # turns NAs to zeroes\n\n# the following is completely unacceptable but I need to keep going\n# objective of the following code is to create a list of data frames. each element of the list is one frame for\n# one of the sites at one of the years. column with the species id is not necessary\n\nindices <- list() # initiate empty list for the loop\n\nfor (i in 1:(dataColumns/length(quadrats))) {\n  indices[[i]] <- (1:5)+5*i-4\n}\n\n# next is to create the actual list of frames\n\nlistColumns <- list()\n\nfor (i in 1:length(indices)) {\n  listColumns[[i]] <- data.frame(dataAllYears[,indices[[i]]])\n}\n\nquadratsSums <- lapply(listColumns, rowSums) # here the quadrats for one site are added up. can also be averaged\n\nsiteFrame <- abind(quadratsSums, along=2) # back to a data frame structure, now each column is one site\n\n# now sites need to be averaged three by three. same notion as before, now mean and sd though (to become se)\n\nindicesSites <- list()\n\nfor (i in 1:(dataColumns/length(quadrats)/length(sites))) {\n  indicesSites[[i]] <- (1:3)+3*i-3\n}\n\nlistMeans <- list()\n\nfor (i in 1:length(indicesSites)) {\n  listMeans[[i]] <- data.frame(siteFrame[,indicesSites[[i]]])\n}\n\n# and then average. all of this was probably supposed to be done in one line\n\nsiteMeans <- lapply(listMeans, rowMeans)\nfinalFrame <- as.data.frame(abind(siteMeans, along=2))\ncolnames(finalFrame) <- years\nhead(finalFrame)\n\n# following option 1, I subset the finalFrame with only the species keys\n\nrestrictedFrame <- finalFrame[identified[,1],] # yep\nrestrictedFrame$Species <- identified$Species.name\n\n\n\n# diagnostic and exploratory region\n\ntotalSpongeNumber <- data.frame(colSums(restrictedFrame[,-length(restrictedFrame)]), \n                                as.numeric(colnames(restrictedFrame[,-length(restrictedFrame)])))\ncolnames(totalSpongeNumber) <- c(\"Number\",\"Year\")\n\ntotalSpongePlot <- ggplot(data=totalSpongeNumber, aes(x=Year, y=Number))+\n  geom_line()+\n  geom_point()+\n  scale_x_continuous(breaks = seq(5,16,1),\n                   labels = seq(5,16,1),\n                   limits = c(5,16))+\n  scale_y_continuous(limits = c(0,1000),\n                     breaks = seq(0,1000,100))+\n  theme_bw()+\n  theme(panel.grid.minor = element_blank(), \n        panel.grid.major = element_blank())+\n  theme(plot.title = element_text(size=14, vjust=2))+\n  theme(axis.title.x = element_text(size=10,vjust=-0.5),\n        axis.title.y = element_text(size=10,vjust=0.5))+\n  theme(axis.text.x=element_text(size=10))+\n  theme(axis.text.y=element_text(size=10))\ntotalSpongePlot\n\n\n\n\n\n\n\nmeltedFrame <- melt(restrictedFrame, \n                    variable.name = \"Year\",\n                    value.name = \"Number\", id.vars = \"Species\")\nmeltedFrame$Year <- as.numeric(as.character(meltedFrame$Year))\n\n# plot as area chart the abundance through time. 2 years (2010 and 2012) are missing from the data.\n# also a calculation of the uncertainty is required.\n\np <- ggplot(data = meltedFrame, aes(x = Year, y = Number, group = Species))+\n  geom_area(aes(fill = Species))\np\n\nggsave(\"/home/somros/Documents/R/exploratoryHoga/output/pics/spongeAbundanceBuoy3.pdf\", p,\n       width=12, height=7, useDingbats=T)\n\n# species need to be aggregated until functional group level, then analysis can be rerun.\n",
    "created" : 1478740368163.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "633246970",
    "id" : "452DE91A",
    "lastKnownWriteTime" : 1476244824,
    "last_content_update" : 1476244824,
    "path" : "//staff/Home/SCIFAC/rovellal/DocumentsRedir/rProjects/hoga/exploratoryHoga/trunk/spongeAbundanceBuoy3.R",
    "project_path" : "spongeAbundanceBuoy3.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}