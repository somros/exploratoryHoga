{
    "collab_server" : "",
    "contents" : "# 17/10/2016 script for MDS analysis on the Buoy 3 data. ONe of tw twin scripts for the moment, one\n# for across year comparison of the same site and one for across sites comparison of the same year. \n\n\nrequire(abind)\nrequire(MASS)\nrequire(ggplot2)\nrequire(BiodiversityR)\nrequire(ggvegan)\n\n\nsetwd(\"//Staff/Home/SCIFAC/rovellal/DocumentsRedir/Data/Hoga/buoy3\")\nmyData <- read.csv(\"spongeAbundanceQuadrats.csv\")\n\n# turn to numeric immediately\n\nmyData <- myData[c(1:124),]\nmyData <- apply(myData, 2, as.numeric)\nmyData[is.na(myData)] <- 0 # turns NAs in 0, as necessary for Bray-Curtis\n\n\n# some steps to break down the frame in a list of frames, one per year per site.\n\nnOfQuadrats <- 5\n\n\n\n# TODO: introduce routine to cut data frames to the species accounting for 90% of the abundance. must be applied\n# to each quadrat and then all the species considered make the subset key for the entire data frame\n\n# we do it with apply. jk lol use a loop apply is slow af anyway\n\nperc <- 90\n\nspecies <- vector(\"list\", length = ncol(myData)-1)\n\nfor (k in 2:ncol(myData)) {\n  dataOrd <- myData[order(myData[,k], decreasing = T),]\n  # does the math: sum all the entries in one column to get the total\n  totNum <- sum(dataOrd[,k])\n  n <- totNum*perc/100\n  ntmp <- 0\n  spy <- 0\n  for (i in 1:nrow(dataOrd)) {\n    if (ntmp < n) {\n      ntmp <- ntmp + dataOrd[i,k]\n      spy <- i\n    } else {\n      ntmp <- ntmp\n      spy <- spy\n    }\n  }\n  species[[k]] <- dataOrd[c(1:spy),1]\n}\n\nspecies <- factor(levels(factor(unlist(species))))\n\n# now subset original data\n\nsubsetData <- myData[myData[,1] %in% species,] # there we go\n\n\n# if for whatever reason we want to use the entire set of species for the analysis, we can get rid of the above\n# section (this should become a flag). \n# the above routine may be better off if used on the means. That would rule out all the outliers from the\n# single quadrats. The number of species is however half the original amount.\n\n\ndataQuad <- subsetData[,-1] # remove species for convenience\n\n\n# create vector of indeces for consequent loop (breakage)\n\nindeces <- rep(1:30, each = 5)\n\ndataQuadN <- rbind(indeces, dataQuad)\n\n# split into list depending on the index\n\nnewList <- vector(mode = \"list\", length = length(indeces)/nOfQuadrats)\n\nfor (i in 1:length(newList)) {\n  subsetFrame <- dataQuadN[1,]==i\n  newList[[i]] <- dataQuadN[,subsetFrame]\n}\n\n\n\n\n# get rid of the index and make row means (sd later)\n\nnewListMeans <- lapply(newList, function(x) {\n  y <- x[-1,]\n  z <- rowMeans(y)\n  frame <- as.data.frame(z[1:nrow(dataQuad)])\n  colnames(frame) <- paste(\"Mean\", substr(names(x[1,])[1], 2,3), substr(names(x[1,])[1], 5, 5), sep = \"\")\n  return(frame)\n})\n\n\nallMeans <- as.data.frame(abind(newListMeans, along = 2))\n\n# transform in log(x+1). we can debate wether we want to have this done here or earlier. as a rule of thumb,\n# the earlier the better. Need to investigate the sensitivity to this of the MDS plot though, prepare 2 versions\n\n\nallMeansTrans <- log10(allMeans+1)\n\n\n# first we transpose (which is not necessary now but should become at some point I reckon)\n\ntransMatrix <- t(allMeansTrans)\n\n# now structure is N as rows and species as columns. However, we osu old structure for computation (same ending point and I don't\n# have to recode it all up)\n\ngrandBC <- list()\n\nfor (i in 1:length(allMeansTrans)) {\n  BC <- vector(mode = \"logical\", length = length(allMeansTrans))\n  for (j in 1:length(allMeansTrans)) {\n    reduced <- allMeansTrans[,c(i,j)]\n    BCpartial <- apply(reduced, 1, function(x) {\n      numBC <- 2*min(x[1], x[2])\n      denBC <- x[1]+x[2]\n      metrics <- c(numBC, denBC)\n    })\n    BC[j] <- rowSums(BCpartial)[1]/rowSums(BCpartial)[2]\n  }\n  grandBC[[i]] <- BC\n} # minchia che culo\n\nkekes <- abind(grandBC, along = 0)\ncolnames(kekes) <- names(allMeansTrans)\nrownames(kekes) <- names(kekes)\n\n\n# now metric MDS plots, or PCO\n\n# turn intodissimilarity\n\ndissMatrix <- 1-kekes\n\nfit <- cmdscale(dissMatrix, k = 2, add = T) \nfitEig <- cmdscale(dissMatrix, k = 2, eig = T, add = T) \n\ndistances <- as.data.frame(fit$points)\nrownames(distances) <- names(allMeansTrans)\ndistances$Names <- as.character(rownames(distances))\nfor (i in 1:nrow(distances)) {\n  distances$Year[i] <- paste(\"20\", substr(distances$Names[i], \n                                          (nchar(distances$Names[i])-2), \n                                          (nchar(distances$Names[i])-1)),\n                             sep = \"\")\n}\nfor (i in 1:nrow(distances)) {\n  distances$Site[i] <- substr(distances$Names[i], nchar(distances$Names[i]), nchar(distances$Names[i]))\n}\n\n# plot\n\nMDSplotYears <- ggplot(data = distances, aes(x = V1, y = V2, group = Site, color = Year))+\n  geom_hline(yintercept = 0)+\n  geom_vline(xintercept = 0)+\n  geom_text(aes(label = Year, color = Year), size = 4.5, \n            fontface = \"bold\", vjust = 0, nudge_y = 0.02)+\n  geom_point(aes(shape = Site, color = Year), size = 2)+\n  #geom_path(size = 1)+\n  #scale_x_continuous(limits = c(-.25,.25))+\n  #scale_y_continuous(limits = c(-.25,.25))+\n  theme_bw()#+\n  #facet_grid(.~Site)\nMDSplotYears\n\n# calculating the dissimilarity matrix among all instances (site*year) we see an influence of space in clustering.\n# temporal variation and return to original conditions is a bit less evident but still well visible considering the \n# sites one at a time. good plot, now need to go on and end up with the CAP for the species!!!\n\n\n# CAP uses a dedicated package and starts from the species list\n\n# get eigenvalues\n\neig <- eigenvals(fitEig)\nexpVar <- (cumsum(eig/sum(eig))*100)[1:2] # how much of the variability of the original matrix do the first 2 axes explain?\n\n# need to build a dummy frame apparently with data\n\ndummyMatrix <- as.data.frame(cbind(distances$Year, distances$Site))\ncolnames(dummyMatrix) <- c(\"Year\", \"Site\")\nrownames(dummyMatrix) <- rownames(transMatrix)\n\nCAPall <- capscale(transMatrix ~ Year + Site, dummyMatrix, distance = \"bray\", add = T)\nCAPTime <- capscale(transMatrix ~ Year, dummyMatrix, distance = \"bray\", add = T)\nCAPSpace <- capscale(transMatrix ~ Site, dummyMatrix, distance = \"bray\", add = T)\n\nplot(CAPall)\nplot(CAPTime)\nplot(CAPSpace)\n\ncomponents <- fortify(CAPall) # this is from the ggvegan package and allow to customize the plot, interface between vegan and ggplot\ncomponents <- data.frame(lapply(components, function(x) {\n  x <- gsub(\"Year\", \"\", x)\n  x <- gsub(\"Site\", \"\", x)\n  x <- gsub(\"Mean\", \"\", x)\n  return(x)\n}))\ncomponents$Dim1 <- as.numeric(as.character(components$Dim1))\ncomponents$Dim2 <- as.numeric(as.character(components$Dim2))\n\n\n# plotter\nplotData <- subset(components, components$Score != \"biplot\" & components$Score != \"constraints\" &\n                    components$Score != \"sites\")\n\nCAPcool <- ggplot(data = plotData, aes(x = Dim1, y = Dim2, group = Label))+\n  geom_text(aes(label = Label, color = Score))+\n  geom_segment(data = subset(plotData, plotData$Score == \"centroids\"),\n                             aes(x = 0, xend = Dim1, y = 0, yend = Dim2))+\n  geom_hline(yintercept = 0)+\n  geom_vline(xintercept = 0)+\n  \n  theme_bw()+\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank())\nCAPcool\n",
    "created" : 1477431791630.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "662944244",
    "id" : "1A0A0662",
    "lastKnownWriteTime" : 1477450873,
    "last_content_update" : 1477450873963,
    "path" : "//staff/Home/SCIFAC/rovellal/DocumentsRedir/rProjects/hoga/exploratoryHoga/trunk/CAP.R",
    "project_path" : "CAP.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}